# -*- coding: UTF-8 -*-
# generated by wxGlade 0.4cvs on Sat Aug  6 00:27:29 2005
#
# File: $Id$
#
# ArabicAnalyzer
# Copyright (C) 2005 Alexander Lee
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import wx

import pyaramorph

# begin wxGlade: dependencies
# end wxGlade

class AnalyzerFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AnalyzerFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.analyzerMenubar = wx.MenuBar()
        self.SetMenuBar(self.analyzerMenubar)
        self.menuFile = wx.Menu()
        self.menuItemClear = wx.MenuItem(self.menuFile, wx.NewId(), "&Clear transcript", "", wx.ITEM_NORMAL)
        self.menuFile.AppendItem(self.menuItemClear)
        self.menuItemSave = wx.MenuItem(self.menuFile, wx.NewId(), "&Save transcript", "", wx.ITEM_NORMAL)
        self.menuFile.AppendItem(self.menuItemSave)
        self.menuFile.AppendSeparator()
        self.menuItemFont = wx.MenuItem(self.menuFile, wx.NewId(), "Choose Fo&nt", "", wx.ITEM_NORMAL)
        self.menuFile.AppendItem(self.menuItemFont)
        self.menuFile.AppendSeparator()
        self.menuItemQuit = wx.MenuItem(self.menuFile, wx.NewId(), "&Quit", "", wx.ITEM_NORMAL)
        self.menuFile.AppendItem(self.menuItemQuit)
        self.analyzerMenubar.Append(self.menuFile, "&File")
        self.menuHelp = wx.Menu()
        self.menuItemAbout = wx.MenuItem(self.menuHelp, wx.NewId(), "&About", "", wx.ITEM_NORMAL)
        self.menuHelp.AppendItem(self.menuItemAbout)
        self.analyzerMenubar.Append(self.menuHelp, "&Help")
        # Menu Bar end
        self.label_1 = wx.StaticText(self, -1, "Arabic Morphological Analyzer")
        self.textTranscript = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.textInput = wx.TextCtrl(self, -1, "", style=wx.TE_PROCESS_ENTER)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnMenuItemClear, self.menuItemClear)
        self.Bind(wx.EVT_MENU, self.OnMenuItemSave, self.menuItemSave)
        self.Bind(wx.EVT_MENU, self.OnMenuItemFont, self.menuItemFont)
        self.Bind(wx.EVT_MENU, self.OnMenuItemQuit, self.menuItemQuit)
        self.Bind(wx.EVT_MENU, self.OnMenuItemAbout, self.menuItemAbout)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnTextEnter, self.textInput)
        # end wxGlade

        EVT_LOADANALYZER(self, self.LoadAnalyzer)

    def __set_properties(self):
        # begin wxGlade: AnalyzerFrame.__set_properties
        self.SetTitle("Arabic Analyzer")
        self.label_1.SetFont(wx.Font(12, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.textTranscript.SetMinSize((800,500))
        self.textTranscript.SetFont(wx.Font(20, wx.TELETYPE, wx.NORMAL, wx.NORMAL, 0, "Scheherazade"))
        self.textInput.SetFont(wx.Font(20, wx.TELETYPE, wx.NORMAL, wx.NORMAL, 0, "Scheherazade"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AnalyzerFrame.__do_layout
        analyzerSizer = wx.BoxSizer(wx.VERTICAL)
        analyzerSizer.Add(self.label_1, 0, wx.ALL|wx.ADJUST_MINSIZE, 5)
        analyzerSizer.Add(self.textTranscript, 1, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 5)
        analyzerSizer.Add(self.textInput, 0, wx.ALL|wx.EXPAND|wx.ADJUST_MINSIZE, 5)
        self.SetAutoLayout(True)
        self.SetSizer(analyzerSizer)
        analyzerSizer.Fit(self)
        analyzerSizer.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def LoadAnalyzer(self, event):
        """ Prepare the application. Not part of constructor, because we
        want the output to appear after the window has been created. """
        bc = wx.BusyCursor()
        self.out = TextCtrlWriter(self.textTranscript)
        self.morph = pyaramorph.Analyzer(out=self.out, err=self.out)

    def OnTextEnter(self, event): # wxGlade: AnalyzerFrame.<event_handler>
        input = self.textInput.GetValue()
        input = unicode(input)
        self.morph.Process(input)
        self.textInput.SetSelection(-1, -1) # select all text

    def OnMenuItemClear(self, event): # wxGlade: AnalyzerFrame.<event_handler>
        self.textTranscript.Clear()

    def OnMenuItemSave(self, event): # wxGlade: AnalyzerFrame.<event_handler>
        # TODO
        event.Skip()

    def OnMenuItemFont(self, event): # wxGlade: AnalyzerFrame.<event_handler>
        # TODO
        event.Skip()

    def OnMenuItemQuit(self, event): # wxGlade: AnalyzerFrame.<event_handler>
        event.Skip()

    def OnMenuItemAbout(self, event): # wxGlade: AnalyzerFrame.<event_handler>
        # TODO
        event.Skip()

# end of class AnalyzerFrame

# Custom event
LOADANALYZER = wx.NewEventType() 
 
def EVT_LOADANALYZER( window, function ): 
    """ Tell the window to load its analyzer """
    window.Connect( -1, -1, LOADANALYZER, function ) 
 
class LoadAnalyzerEvent(wx.PyCommandEvent): 
    eventType = LOADANALYZER 

    def __init__(self, windowID): 
        wx.PyCommandEvent.__init__(self, self.eventType, windowID) 
 
    def Clone( self ): 
        self.__class__( self.GetId() ) 

# Custom stream handler
class TextCtrlWriter:
    def __init__(self, destctrl):
        self.textctrl = destctrl

    def write(self, string):
        self.textctrl.WriteText(string)
